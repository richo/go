//line go.y:21
package gc

import __yyfmt__ "fmt"

//line go.y:21
import (
	"strings"
)

//line go.y:27
type yySymType struct {
	yys  int
	node *Node
	list *NodeList
	typ  *Type
	sym  *Sym
	val  Val
	i    int
}

const LLITERAL = 57346
const LASOP = 57347
const LCOLAS = 57348
const LBREAK = 57349
const LCASE = 57350
const LCHAN = 57351
const LCONST = 57352
const LCONTINUE = 57353
const LDDD = 57354
const LDEFAULT = 57355
const LDEFER = 57356
const LELSE = 57357
const LFALL = 57358
const LFOR = 57359
const LFUNC = 57360
const LGO = 57361
const LGOTO = 57362
const LIF = 57363
const LIMPORT = 57364
const LINTERFACE = 57365
const LMAP = 57366
const LNAME = 57367
const LPACKAGE = 57368
const LRANGE = 57369
const LRETURN = 57370
const LSELECT = 57371
const LSTRUCT = 57372
const LSWITCH = 57373
const LTYPE = 57374
const LVAR = 57375
const LANDAND = 57376
const LANDNOT = 57377
const LBODY = 57378
const LCOMM = 57379
const LDEC = 57380
const LEQ = 57381
const LGE = 57382
const LGT = 57383
const LIGNORE = 57384
const LINC = 57385
const LLE = 57386
const LLSH = 57387
const LLT = 57388
const LNE = 57389
const LOROR = 57390
const LRSH = 57391
const NotPackage = 57392
const NotParen = 57393
const PreferToRightParen = 57394

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LLITERAL",
	"LASOP",
	"LCOLAS",
	"LBREAK",
	"LCASE",
	"LCHAN",
	"LCONST",
	"LCONTINUE",
	"LDDD",
	"LDEFAULT",
	"LDEFER",
	"LELSE",
	"LFALL",
	"LFOR",
	"LFUNC",
	"LGO",
	"LGOTO",
	"LIF",
	"LIMPORT",
	"LINTERFACE",
	"LMAP",
	"LNAME",
	"LPACKAGE",
	"LRANGE",
	"LRETURN",
	"LSELECT",
	"LSTRUCT",
	"LSWITCH",
	"LTYPE",
	"LVAR",
	"LANDAND",
	"LANDNOT",
	"LBODY",
	"LCOMM",
	"LDEC",
	"LEQ",
	"LGE",
	"LGT",
	"LIGNORE",
	"LINC",
	"LLE",
	"LLSH",
	"LLT",
	"LNE",
	"LOROR",
	"LRSH",
	"'+'",
	"'-'",
	"'|'",
	"'^'",
	"'*'",
	"'/'",
	"'%'",
	"'&'",
	"NotPackage",
	"NotParen",
	"'('",
	"')'",
	"PreferToRightParen",
	"';'",
	"'.'",
	"'$'",
	"'='",
	"':'",
	"'{'",
	"'}'",
	"'!'",
	"'~'",
	"'['",
	"']'",
	"'?'",
	"'@'",
	"','",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyMaxDepth = 200

//line go.y:2276
func fixlbrace(lbr int) {
	// If the opening brace was an LBODY,
	// set up for another one now that we're done.
	// See comment in lex.C about loophack.
	if lbr == LBODY {
		loophack = 1
	}
}

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 17,
	1, 1,
	63, 23,
	-2, 0,
	-1, 48,
	6, 277,
	66, 277,
	76, 277,
	-2, 49,
	-1, 56,
	67, 153,
	-2, 162,
	-1, 74,
	60, 181,
	-2, 216,
	-1, 75,
	60, 182,
	-2, 183,
	-1, 122,
	60, 134,
	64, 134,
	68, 134,
	72, 134,
	-2, 267,
	-1, 126,
	60, 134,
	64, 134,
	68, 134,
	72, 134,
	-2, 268,
	-1, 177,
	2, 216,
	36, 216,
	60, 181,
	68, 216,
	-2, 173,
	-1, 178,
	36, 183,
	60, 182,
	68, 183,
	-2, 174,
	-1, 185,
	63, 252,
	69, 252,
	-2, 0,
	-1, 243,
	63, 252,
	69, 252,
	-2, 0,
	-1, 254,
	8, 252,
	13, 252,
	63, 252,
	69, 252,
	-2, 0,
	-1, 327,
	4, 237,
	63, 237,
	69, 237,
	-2, 157,
	-1, 410,
	36, 176,
	60, 176,
	68, 176,
	-2, 167,
	-1, 411,
	36, 177,
	60, 177,
	68, 177,
	-2, 168,
	-1, 412,
	36, 178,
	60, 178,
	68, 178,
	-2, 169,
	-1, 413,
	36, 179,
	60, 179,
	68, 179,
	-2, 170,
	-1, 419,
	8, 252,
	13, 252,
	63, 252,
	69, 252,
	-2, 0,
	-1, 420,
	63, 252,
	69, 252,
	-2, 0,
	-1, 501,
	63, 252,
	69, 252,
	-2, 0,
	-1, 556,
	60, 157,
	-2, 319,
	-1, 557,
	60, 158,
	-2, 318,
	-1, 583,
	8, 252,
	13, 252,
	63, 252,
	69, 252,
	-2, 0,
	-1, 597,
	36, 180,
	60, 180,
	68, 180,
	-2, 171,
}

const yyNprod = 353
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 2321

var yyAct = [...]int{

	74, 384, 469, 287, 306, 293, 615, 34, 230, 461,
	103, 549, 401, 75, 403, 553, 304, 404, 187, 292,
	481, 227, 392, 460, 340, 358, 489, 244, 330, 320,
	305, 246, 109, 85, 326, 376, 101, 104, 249, 247,
	298, 341, 108, 339, 242, 470, 175, 14, 482, 322,
	6, 388, 213, 182, 156, 471, 327, 472, 334, 395,
	520, 416, 375, 463, 288, 13, 589, 449, 177, 231,
	472, 632, 588, 173, 658, 11, 604, 10, 220, 192,
	106, 178, 49, 545, 10, 324, 448, 194, 425, 176,
	161, 323, 193, 13, 162, 312, 311, 199, 209, 585,
	319, 419, 163, 10, 228, 12, 13, 626, 10, 228,
	464, 387, 228, 239, 668, 228, 155, 229, 108, 462,
	204, 156, 229, 396, 88, 229, 12, 13, 229, 129,
	185, 631, 630, 12, 13, 206, 200, 201, 205, 223,
	670, 633, 451, 240, 235, 10, 88, 210, 195, 215,
	217, 219, 12, 13, 510, 447, 234, 12, 13, 511,
	638, 310, 177, 430, 290, 284, 284, 10, 284, 10,
	637, 214, 214, 214, 214, 178, 154, 608, 605, 419,
	177, 203, 297, 176, 90, 598, 156, 540, 463, 450,
	115, 186, 228, 178, 12, 13, 531, 228, 228, 527,
	228, 176, 86, 519, 114, 229, 90, 510, 48, 10,
	229, 229, 511, 229, 419, 628, 12, 13, 12, 13,
	487, 419, 282, 303, 88, 183, 300, 418, 54, 183,
	407, 243, 172, 228, 400, 464, 332, 277, 278, 117,
	285, 369, 466, 362, 211, 10, 229, 437, 419, 228,
	316, 91, 228, 336, 228, 130, 228, 184, 12, 13,
	373, 184, 229, 355, 364, 229, 357, 229, 508, 229,
	119, 119, 614, 609, 127, 606, 174, 579, 572, 562,
	360, 381, 10, 383, 90, 382, 189, 378, 377, 342,
	468, 342, 342, 367, 12, 13, 177, 371, 467, 446,
	445, 397, 410, 439, 427, 391, 386, 372, 363, 178,
	412, 96, 228, 228, 368, 411, 417, 176, 222, 98,
	370, 361, 228, 94, 335, 229, 229, 100, 394, 99,
	84, 12, 13, 97, 95, 229, 20, 663, 415, 662,
	256, 661, 660, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 130, 130, 279, 92, 228, 442, 444,
	174, 413, 296, 432, 435, 493, 228, 426, 652, 483,
	229, 651, 624, 495, 69, 621, 612, 438, 494, 229,
	302, 457, 611, 456, 284, 512, 492, 177, 476, 284,
	602, 601, 515, 600, 597, 486, 587, 497, 566, 228,
	178, 543, 535, 526, 618, 228, 517, 516, 176, 518,
	513, 500, 229, 499, 342, 342, 228, 485, 229, 325,
	331, 514, 327, 479, 130, 342, 478, 529, 521, 229,
	475, 443, 228, 434, 496, 477, 130, 523, 524, 423,
	528, 502, 484, 374, 299, 229, 506, 532, 619, 610,
	576, 324, 561, 198, 574, 459, 441, 323, 541, 542,
	277, 278, 563, 356, 332, 255, 253, 181, 436, 558,
	613, 12, 13, 536, 228, 380, 538, 434, 198, 350,
	565, 385, 228, 198, 327, 389, 198, 229, 568, 198,
	493, 493, 55, 70, 174, 229, 10, 405, 495, 495,
	327, 177, 405, 494, 494, 118, 433, 7, 578, 575,
	505, 492, 492, 342, 178, 342, 577, 557, 582, 333,
	584, 342, 176, 289, 342, 590, 595, 596, 591, 571,
	5, 295, 434, 12, 13, 333, 212, 122, 126, 24,
	342, 16, 19, 657, 329, 12, 13, 458, 121, 12,
	13, 164, 165, 166, 167, 168, 169, 170, 171, 496,
	496, 130, 366, 307, 431, 228, 198, 228, 130, 564,
	308, 198, 198, 483, 198, 337, 208, 284, 229, 207,
	229, 26, 533, 622, 21, 93, 130, 130, 28, 537,
	629, 57, 623, 493, 625, 174, 254, 76, 635, 189,
	159, 495, 390, 646, 158, 673, 494, 198, 643, 647,
	649, 342, 650, 648, 492, 645, 342, 586, 338, 641,
	353, 354, 393, 198, 177, 636, 198, 569, 198, 515,
	198, 160, 342, 157, 627, 123, 123, 178, 501, 659,
	583, 420, 493, 493, 31, 176, 325, 22, 534, 15,
	495, 495, 669, 23, 202, 494, 494, 671, 331, 18,
	672, 3, 496, 492, 492, 8, 675, 674, 664, 665,
	342, 284, 164, 171, 4, 557, 198, 2, 342, 1,
	453, 216, 547, 10, 548, 349, 198, 198, 551, 599,
	552, 616, 490, 190, 351, 250, 198, 80, 81, 347,
	345, 343, 580, 581, 440, 72, 346, 71, 238, 174,
	480, 496, 496, 350, 318, 221, 328, 245, 110, 405,
	655, 593, 405, 405, 620, 124, 342, 10, 634, 342,
	348, 9, 12, 13, 656, 10, 617, 128, 17, 402,
	321, 198, 25, 56, 27, 89, 36, 37, 344, 198,
	198, 13, 283, 452, 639, 640, 105, 105, 112, 116,
	66, 644, 107, 111, 473, 39, 38, 120, 120, 35,
	102, 120, 150, 281, 280, 73, 12, 13, 218, 113,
	592, 349, 151, 198, 12, 13, 152, 507, 189, 198,
	351, 146, 147, 148, 149, 347, 345, 556, 509, 224,
	198, 87, 346, 0, 236, 0, 78, 241, 0, 350,
	0, 0, 89, 0, 0, 125, 198, 0, 0, 0,
	83, 79, 10, 0, 0, 0, 348, 82, 105, 0,
	653, 654, 174, 105, 233, 405, 112, 0, 0, 0,
	248, 252, 0, 0, 344, 0, 12, 13, 0, 0,
	0, 197, 544, 0, 546, 0, 555, 232, 198, 0,
	559, 0, 0, 560, 0, 0, 198, 0, 0, 77,
	0, 12, 13, 429, 198, 198, 0, 0, 0, 570,
	0, 0, 0, 0, 0, 0, 0, 313, 294, 0,
	0, 0, 314, 315, 0, 317, 0, 0, 0, 0,
	0, 0, 135, 150, 0, 153, 0, 136, 140, 141,
	0, 56, 139, 151, 138, 137, 134, 152, 142, 143,
	144, 145, 146, 147, 148, 149, 120, 120, 365, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 150, 416, 0, 359, 379, 0, 198,
	603, 198, 105, 151, 0, 607, 0, 152, 142, 143,
	144, 145, 146, 147, 148, 149, 0, 0, 0, 56,
	0, 0, 0, 0, 0, 0, 0, 198, 0, 248,
	56, 248, 0, 0, 0, 68, 0, 0, 0, 0,
	78, 0, 0, 0, 0, 0, 0, 409, 0, 125,
	0, 0, 0, 0, 83, 79, 10, 421, 422, 642,
	0, 82, 0, 0, 555, 0, 0, 428, 65, 0,
	0, 0, 0, 0, 0, 0, 198, 198, 0, 0,
	0, 60, 61, 0, 64, 58, 0, 0, 59, 0,
	0, 67, 424, 0, 0, 0, 0, 0, 0, 406,
	0, 62, 63, 77, 0, 12, 13, 0, 0, 0,
	0, 89, 409, 0, 0, 0, 0, 0, 0, 68,
	0, 0, 0, 0, 78, 0, 0, 0, 465, 0,
	0, 0, 359, 125, 0, 0, 0, 105, 83, 79,
	10, 0, 0, 0, 105, 82, 0, 0, 112, 0,
	488, 248, 65, 0, 313, 0, 498, 0, 0, 0,
	525, 0, 0, 0, 0, 60, 61, 0, 64, 58,
	0, 530, 59, 0, 0, 67, 0, 0, 0, 0,
	0, 0, 0, 594, 0, 62, 63, 77, 0, 12,
	13, 0, 0, 0, 0, 56, 56, 0, 0, 0,
	0, 0, 0, 120, 0, 120, 0, 0, 0, 0,
	0, 0, 0, 539, 0, 120, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 68, 550, 554, 0, 573,
	78, 0, 0, 0, 0, 359, 0, 0, 465, 125,
	0, 0, 465, 0, 83, 79, 10, 567, 359, 0,
	0, 82, 0, 0, 0, 0, 0, 309, 0, 68,
	0, 0, 41, 0, 78, 47, 42, 248, 0, 44,
	0, 40, 50, 125, 43, 45, 53, 56, 83, 79,
	10, 67, 0, 46, 52, 82, 51, 32, 30, 0,
	0, 0, 65, 77, 0, 12, 13, 0, 0, 0,
	0, 0, 0, 0, 0, 60, 61, 0, 64, 58,
	0, 0, 59, 0, 0, 67, 0, 0, 0, 0,
	0, 0, 0, 310, 0, 62, 63, 77, 0, 12,
	13, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 29,
	248, 68, 248, 0, 41, 0, 78, 47, 42, 56,
	0, 44, 0, 40, 50, 33, 43, 45, 53, 0,
	83, 79, 10, 0, 0, 46, 52, 82, 51, 32,
	30, 0, 550, 0, 65, 554, 359, 0, 0, 465,
	0, 0, 0, 359, 0, 359, 0, 60, 61, 0,
	64, 58, 0, 0, 59, 0, 68, 67, 0, 0,
	0, 78, 0, 0, 0, 0, 0, 62, 63, 77,
	125, 12, 13, 0, 0, 83, 79, 10, 0, 504,
	0, 0, 82, 0, 0, 0, 0, 0, 0, 65,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 60, 61, 0, 64, 58, 0, 0, 59,
	0, 68, 67, 0, 0, 0, 78, 0, 0, 0,
	0, 0, 62, 63, 77, 125, 12, 13, 0, 0,
	83, 79, 10, 0, 503, 0, 0, 82, 0, 0,
	0, 0, 0, 0, 65, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 60, 61, 0,
	64, 58, 0, 0, 59, 0, 68, 67, 0, 0,
	0, 78, 0, 0, 0, 78, 0, 62, 63, 77,
	125, 12, 13, 0, 125, 83, 79, 10, 0, 83,
	79, 10, 82, 0, 398, 0, 82, 0, 0, 180,
	0, 0, 0, 233, 0, 0, 0, 0, 0, 68,
	0, 0, 60, 61, 78, 64, 179, 0, 0, 59,
	197, 0, 67, 125, 0, 0, 491, 0, 83, 79,
	10, 0, 62, 63, 77, 82, 12, 13, 77, 0,
	12, 13, 180, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 60, 61, 0, 64, 179,
	0, 0, 59, 0, 68, 67, 291, 0, 0, 78,
	0, 0, 0, 0, 0, 62, 63, 77, 125, 12,
	13, 0, 0, 83, 79, 10, 0, 286, 0, 0,
	82, 0, 0, 0, 0, 0, 0, 65, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 68, 0, 0,
	60, 61, 78, 64, 58, 188, 0, 59, 0, 0,
	67, 125, 0, 0, 0, 0, 83, 79, 10, 0,
	62, 63, 77, 82, 12, 13, 0, 0, 0, 0,
	65, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	68, 0, 0, 60, 61, 78, 64, 58, 0, 0,
	59, 0, 0, 67, 125, 0, 0, 0, 0, 83,
	79, 10, 0, 62, 63, 77, 82, 12, 13, 0,
	0, 0, 0, 65, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 68, 0, 0, 60, 61, 78, 64,
	58, 0, 0, 59, 0, 0, 67, 125, 0, 0,
	0, 0, 83, 79, 10, 0, 62, 63, 77, 82,
	12, 13, 0, 0, 0, 0, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 60,
	61, 0, 64, 179, 0, 0, 59, 0, 0, 67,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 62,
	63, 77, 0, 12, 13, 135, 150, 0, 153, 0,
	136, 140, 141, 0, 0, 139, 151, 138, 137, 134,
	152, 142, 143, 144, 145, 146, 147, 148, 149, 68,
	0, 0, 0, 0, 301, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 399, 349, 0, 0, 83, 79,
	10, 0, 0, 0, 351, 82, 78, 0, 0, 347,
	345, 343, 65, 0, 0, 125, 346, 0, 0, 0,
	83, 79, 10, 350, 0, 60, 61, 82, 64, 58,
	0, 0, 59, 0, 233, 67, 0, 0, 0, 78,
	348, 0, 0, 0, 0, 62, 63, 77, 125, 12,
	13, 197, 352, 83, 79, 10, 0, 232, 344, 0,
	82, 13, 0, 237, 0, 0, 0, 233, 0, 77,
	0, 12, 13, 226, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 197, 0, 0, 0, 0, 0,
	232, 0, 0, 0, 0, 0, 225, 0, 0, 0,
	0, 0, 77, 0, 12, 13, 226, 135, 150, 0,
	153, 0, 136, 140, 141, 0, 0, 139, 151, 138,
	137, 134, 152, 142, 143, 144, 145, 146, 147, 148,
	149, 135, 150, 0, 153, 0, 136, 140, 141, 0,
	667, 139, 151, 138, 137, 134, 152, 142, 143, 144,
	145, 146, 147, 148, 149, 0, 78, 0, 0, 251,
	0, 0, 0, 0, 666, 125, 0, 0, 0, 0,
	83, 79, 10, 0, 0, 135, 150, 82, 153, 0,
	136, 140, 141, 0, 233, 139, 151, 138, 137, 134,
	152, 142, 143, 144, 145, 146, 147, 148, 149, 0,
	0, 197, 78, 0, 0, 0, 0, 232, 522, 0,
	0, 125, 0, 0, 0, 0, 83, 79, 10, 77,
	0, 12, 13, 82, 301, 0, 0, 0, 78, 0,
	233, 0, 0, 125, 0, 0, 0, 125, 83, 79,
	10, 0, 83, 79, 10, 82, 0, 197, 0, 82,
	0, 0, 233, 232, 0, 0, 408, 0, 0, 0,
	0, 0, 0, 0, 0, 77, 0, 12, 13, 197,
	0, 0, 0, 197, 0, 232, 0, 0, 0, 414,
	0, 0, 0, 78, 0, 0, 0, 77, 0, 12,
	13, 77, 125, 12, 13, 0, 0, 83, 79, 10,
	0, 0, 0, 0, 82, 349, 0, 0, 474, 349,
	0, 191, 0, 0, 351, 0, 0, 0, 351, 347,
	345, 343, 0, 347, 345, 343, 346, 0, 197, 0,
	346, 0, 0, 350, 196, 0, 0, 455, 0, 0,
	0, 0, 349, 0, 0, 0, 77, 0, 12, 13,
	348, 351, 0, 0, 348, 0, 347, 345, 343, 0,
	454, 0, 0, 346, 0, 0, 0, 0, 344, 0,
	350, 13, 344, 0, 0, 13, 0, 131, 135, 150,
	0, 153, 0, 136, 140, 141, 0, 348, 139, 151,
	138, 137, 134, 152, 142, 143, 144, 145, 146, 147,
	148, 149, 0, 0, 0, 344, 135, 150, 13, 153,
	133, 136, 140, 141, 0, 132, 139, 151, 138, 137,
	134, 152, 142, 143, 144, 145, 146, 147, 148, 149,
	135, 150, 0, 0, 0, 136, 140, 141, 0, 0,
	139, 151, 138, 137, 134, 152, 142, 143, 144, 145,
	146, 147, 148, 149, 135, 150, 0, 0, 0, 136,
	140, 141, 0, 0, 139, 151, 138, 137, 0, 152,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 0,
	0, 0, 136, 140, 141, 0, 0, 139, 151, 138,
	137, 0, 152, 142, 143, 144, 145, 146, 147, 148,
	149,
}
var yyPact = [...]int{

	-1000, -1000, 514, 491, -1000, 78, -1000, 526, 530, 273,
	-1000, -1000, -1000, 590, -1000, -1000, 524, 1307, 267, 142,
	-1000, 187, 301, 266, -1000, 264, -1000, -1000, -1000, -1000,
	720, 712, 668, 144, -1000, -1000, -1000, -1000, -1000, 172,
	-1000, 78, 78, 1181, 1181, 78, 1656, -1000, 2192, 110,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 30, 1656, 1656,
	1656, 1656, 1656, 1656, 1656, 1656, 164, 1699, -1000, -1000,
	-1000, 417, 193, -1000, -1000, -1000, 189, 1613, 2094, 25,
	-1000, -1000, 193, 193, -1000, -1000, 120, 491, -1000, 585,
	582, 73, 179, -1000, 521, -10, -10, -10, 18, -1000,
	-1000, -1000, 257, 1850, -1000, -1000, -1000, 83, 1817, -1000,
	52, 2013, -1000, 163, 1967, 78, 416, -1000, -1000, -1000,
	-1000, -1000, -1000, 30, -1000, 415, -1000, -1000, -1000, -22,
	2164, 1656, -1000, -1000, 1656, 1656, 1656, 1656, 1656, 1656,
	1656, 1656, 1656, 1656, 1656, 1656, 1656, 1656, 1656, 1656,
	1656, 1656, 1656, 1656, 1656, 1656, 1656, 1570, 1656, 497,
	1656, 1515, 481, 1656, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 393, 2164, -1000, -1000, -1000, -1000, 1699,
	1795, 1656, -1000, -1000, -1000, 1215, -1000, 23, 22, 2164,
	-1000, 2013, -1000, -1000, -1000, -1000, 2013, 2013, 186, 2013,
	31, 485, 261, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 581, 2153, -1000, 1806, 2153, -1000, 163, 413,
	78, 258, -1000, -1000, 177, 1656, 78, -1000, -1000, -1000,
	-1000, -1000, 2013, 563, 251, -1000, 175, 1656, 244, -1000,
	-1000, -1000, -1000, 1215, 392, -14, -1000, -1000, 1967, -1000,
	-1000, 2013, 444, 1967, 1215, 1967, 2164, 2240, 2263, 918,
	918, 918, 918, 918, 918, 747, 747, 747, 747, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2216, -22, -22, 2164,
	-1000, 455, 243, -1000, -1000, 45, 1656, -1000, 242, -1000,
	-1000, -1000, 47, -1000, -1000, 1472, 1741, 167, 991, 162,
	-1000, 2039, 878, 991, 158, -1000, -1000, -1000, -1000, -1000,
	-1000, 2013, 2013, -1000, 388, -1000, 78, 15, 241, -1000,
	-1000, 807, 570, 462, 418, -1000, -1000, 183, 240, -1000,
	-1000, 406, -1000, 517, 380, 220, -1000, 237, 236, -1000,
	-1000, -1000, -1000, -1000, 82, -5, 121, 74, 2153, 2120,
	548, 405, 59, 176, 235, 227, 78, -6, -1000, 2116,
	379, 78, 1656, -22, -1000, 375, 2013, 372, 78, 1656,
	-22, 366, 78, 151, 1476, 1967, -1000, -1000, -1000, -1000,
	78, 362, -1000, 360, -1000, -1000, 1656, 1417, 1362, 2164,
	484, 1656, 199, 455, 359, -15, 1699, 356, 355, -1000,
	1656, 134, -16, -1000, -1000, 1961, -1000, -1000, 2035, -1000,
	-1000, -1000, -1000, -1000, 2013, 352, -1000, 130, -1000, 1215,
	1215, -1000, -1000, -1000, -1000, 2013, 127, 407, 570, 78,
	-1000, -1000, 351, 517, 183, 570, 517, 78, 118, 469,
	-1000, 1967, 350, -1000, -1000, -1000, -1000, 2153, 10, 2153,
	78, 782, -1000, -1000, 452, 2153, -1000, -1000, 2153, 78,
	216, -1000, 184, -1000, 575, -1000, 59, -1000, -1000, 347,
	-19, 78, 78, 570, 2153, -1000, -1000, -22, -1000, -1000,
	215, -1000, -1000, 1817, -22, -1000, -1000, -1000, 404, -1000,
	-1000, 1967, -1000, -1000, -1000, -1000, -1000, -1000, 400, 1476,
	1476, 1215, 214, 1656, 1656, -1000, -1000, -1000, -1000, -1000,
	1699, 32, -1000, -1000, 345, -1000, -1000, -1000, -1, -1000,
	991, -1000, 1075, 991, 991, 343, -1000, -1000, -1000, 116,
	-1000, -1000, -1000, -1000, -1000, 570, 342, -1000, 340, -1000,
	-1000, -1000, 339, -1000, -1000, 2153, 3, 109, 212, -1000,
	2153, 108, 210, -1000, 399, -1000, -1000, -1000, 331, -1000,
	-1000, 325, -1000, 430, -1000, 209, 686, 398, -1000, -1000,
	570, 324, 78, 175, 1967, 321, 1967, -1000, 38, 1656,
	2164, 2164, 146, 1215, 65, -1000, -1000, -1000, -1000, 1656,
	-1000, -1000, -1000, 2164, -1000, 101, 91, -1000, -1000, -1000,
	570, 570, 1476, -1000, 2153, -1000, 78, 570, -1000, 782,
	78, -1000, 686, 184, -1000, -1000, -1000, 78, -1000, 78,
	-1000, -1000, -1000, 320, -1000, 317, -1000, -1000, -1000, 185,
	-1000, 1656, 1656, 1699, 538, 1, 991, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 281, -1000, 280, 278,
	276, 1476, 1476, 1917, 1893, -1000, -1000, 93, -1000, 71,
	686, -1000, -1000, 686, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1656, 455, -1000,
}
var yyPgo = [...]int{

	0, 53, 811, 735, 34, 163, 30, 705, 31, 808,
	797, 4, 69, 49, 208, 790, 17, 5, 789, 788,
	785, 784, 783, 779, 3, 776, 580, 28, 14, 775,
	384, 39, 46, 228, 37, 18, 773, 515, 64, 601,
	770, 503, 762, 757, 7, 756, 502, 754, 32, 40,
	752, 44, 26, 1, 10, 750, 82, 749, 12, 19,
	748, 747, 22, 744, 738, 730, 16, 27, 727, 726,
	36, 725, 29, 724, 573, 48, 20, 720, 718, 717,
	715, 38, 714, 708, 707, 8, 21, 703, 13, 702,
	0, 75, 52, 23, 9, 25, 15, 11, 701, 6,
	45, 2, 700, 698, 694, 692, 414, 43, 691, 41,
	24, 690, 689, 687, 684, 675, 671, 50, 47, 669,
	33, 664, 58, 663, 659, 657, 654, 651, 650, 648,
	643, 641, 632, 627, 615, 614, 612, 610, 35, 607,
	606, 595,
}
var yyR1 = [...]int{

	0, 112, 114, 114, 116, 113, 115, 115, 119, 119,
	119, 120, 120, 121, 121, 2, 2, 2, 117, 123,
	123, 124, 118, 50, 50, 50, 50, 50, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 126, 70,
	70, 70, 75, 75, 76, 76, 76, 36, 48, 44,
	44, 44, 44, 44, 44, 9, 9, 9, 9, 127,
	11, 128, 10, 62, 62, 129, 53, 42, 42, 42,
	22, 22, 22, 21, 130, 23, 24, 24, 131, 132,
	133, 25, 134, 63, 64, 64, 65, 65, 135, 136,
	45, 137, 43, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 41, 41, 41, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	49, 28, 16, 16, 15, 15, 39, 39, 17, 17,
	31, 1, 1, 33, 34, 37, 37, 3, 3, 3,
	91, 91, 30, 29, 81, 81, 7, 7, 7, 7,
	7, 7, 32, 32, 32, 32, 87, 87, 87, 87,
	87, 79, 79, 80, 89, 89, 89, 89, 89, 12,
	12, 88, 88, 88, 88, 88, 88, 88, 85, 86,
	84, 84, 83, 83, 47, 18, 18, 18, 19, 19,
	90, 51, 51, 52, 52, 52, 139, 20, 20, 60,
	60, 71, 71, 77, 77, 78, 78, 73, 73, 69,
	69, 72, 72, 72, 72, 72, 72, 4, 4, 13,
	27, 27, 27, 82, 8, 8, 8, 8, 68, 68,
	67, 67, 6, 6, 6, 6, 6, 26, 26, 26,
	26, 26, 140, 26, 26, 26, 26, 26, 26, 26,
	26, 66, 66, 55, 55, 54, 54, 56, 56, 59,
	59, 57, 57, 57, 57, 58, 58, 122, 122, 138,
	138, 35, 35, 61, 61, 38, 38, 101, 101, 105,
	105, 103, 103, 5, 5, 141, 141, 141, 141, 141,
	141, 92, 108, 106, 106, 106, 111, 111, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 110,
	109, 95, 95, 97, 96, 96, 99, 99, 98, 98,
	94, 94, 94, 93, 93, 125, 125, 100, 100, 104,
	104, 102, 102,
}
var yyR2 = [...]int{

	0, 4, 0, 3, 0, 3, 0, 3, 2, 5,
	3, 3, 2, 1, 3, 1, 2, 2, 4, 0,
	1, 0, 4, 0, 1, 1, 1, 1, 2, 5,
	3, 2, 5, 7, 3, 2, 5, 3, 1, 2,
	4, 3, 4, 3, 1, 2, 1, 1, 2, 1,
	3, 3, 3, 2, 2, 3, 5, 5, 2, 0,
	4, 0, 3, 0, 2, 0, 4, 4, 4, 2,
	5, 1, 1, 2, 0, 3, 1, 3, 0, 0,
	0, 8, 0, 5, 0, 2, 0, 2, 0, 0,
	7, 0, 5, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 2, 2, 2, 2, 2,
	2, 2, 2, 3, 5, 6, 1, 1, 3, 5,
	5, 4, 6, 8, 1, 5, 5, 5, 7, 1,
	0, 3, 1, 4, 1, 4, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	4, 4, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 3, 1, 1, 1, 2, 1, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 4, 4, 2, 3, 5, 1, 1, 2, 3,
	5, 3, 5, 3, 3, 8, 5, 8, 5, 8,
	5, 0, 3, 0, 1, 3, 1, 4, 2, 0,
	3, 1, 3, 1, 3, 1, 3, 1, 3, 1,
	3, 3, 2, 4, 3, 5, 5, 1, 3, 1,
	2, 1, 3, 4, 1, 2, 2, 1, 1, 3,
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 4, 1, 2, 2, 2, 2, 2,
	2, 1, 3, 1, 3, 1, 3, 1, 3, 1,
	3, 1, 1, 3, 3, 0, 2, 0, 1, 0,
	1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
	1, 0, 1, 0, 1, 4, 4, 5, 6, 4,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 4, 5, 4, 4, 2, 2, 4, 3, 3,
	5, 3, 4, 3, 5, 1, 0, 1, 3, 1,
	1, 2, 1, 1, 5, 0, 2, 1, 3, 1,
	3, 1, 3,
}
var yyChk = [...]int{

	-1000, -112, -113, -116, -114, 26, -117, 26, -115, -3,
	25, -91, 74, 75, -118, -124, 25, -60, -119, 22,
	63, 4, -125, -123, 25, -50, -74, -47, -26, 2,
	33, -126, 32, 18, -44, -23, -45, -43, -25, -29,
	16, 7, 11, 19, 14, 20, 28, 10, -14, -56,
	17, 31, 29, 21, -33, -46, -3, -39, 54, 57,
	50, 51, 70, 71, 53, 37, -40, 60, 4, -30,
	-41, -79, -80, -20, -90, -88, -139, 72, 9, 24,
	-84, -83, 30, 23, 63, -120, 60, -2, 4, -3,
	64, 64, 65, -141, 22, 33, 10, 32, 18, 63,
	63, -70, 60, -54, -34, -3, -75, 60, -54, -48,
	60, -36, -3, -18, 60, 46, -3, 67, -37, -33,
	-3, -37, -41, -39, -3, 18, -41, -33, -61, -56,
	-14, 5, 43, 38, 48, 34, 39, 47, 46, 44,
	40, 41, 50, 51, 52, 53, 54, 55, 56, 57,
	35, 45, 49, 37, 66, 6, 76, -130, -135, -137,
	-131, 60, 64, 72, -46, -46, -46, -46, -46, -46,
	-46, -46, 68, -17, -14, -32, -86, -90, -88, 54,
	37, 60, -1, 36, 68, -1, 2, -35, 12, -14,
	-87, 37, -90, -88, -85, -12, 60, 54, -30, 72,
	-1, -1, -121, 61, -120, -117, -118, 4, 4, 25,
	74, 65, 25, -92, -91, -92, -108, -92, -19, -92,
	60, -71, 61, -70, -7, 66, 76, -86, -90, -88,
	-85, -12, 60, 37, -75, 61, -7, 66, -78, 61,
	-48, -7, -51, 68, -67, -68, -8, -31, -3, -81,
	-7, 12, -3, 60, -140, 60, -14, -14, -14, -14,
	-14, -14, -14, -14, -14, -14, -14, -14, -14, -14,
	-14, -14, -14, -14, -14, -14, -14, -56, -56, -14,
	-21, -22, -38, -42, -44, -56, 27, -24, -38, 36,
	-24, 61, -59, -17, -3, 60, -14, -35, -49, 61,
	-32, 9, -14, -49, -66, -6, -11, -74, -26, 2,
	68, 73, 73, -7, -7, -7, 64, -7, -73, 69,
	-72, -55, -13, 60, 54, -33, -4, 25, -69, 69,
	-27, -33, -4, 60, -122, 63, -118, 4, -106, -107,
	-110, -109, -91, 25, 72, 24, 30, 23, 54, 9,
	37, 18, 66, -106, -106, -51, 60, -100, -95, -3,
	-122, 63, 66, -56, -34, -7, 9, -122, 63, 66,
	-56, -122, 63, -66, 61, 76, -138, -31, -81, -7,
	41, -67, -6, -67, -53, 36, 63, 66, 6, -14,
	-136, 63, -62, -132, -138, 12, 76, -17, 32, 73,
	67, -58, -57, -28, -16, -14, 68, 68, 37, -7,
	-90, -88, -85, -12, 60, -138, 76, -58, 69, 63,
	-127, -7, -7, 61, -3, 73, -122, 63, -7, 76,
	-5, 4, -13, 54, 25, -13, 60, 64, -122, 63,
	-82, 60, -4, 61, -120, 63, 63, 73, 4, 72,
	68, 68, -106, -111, 60, 37, -107, -109, 9, 60,
	-93, -94, 60, 4, 51, -3, 66, 63, 63, -101,
	-100, 61, 76, -106, 12, 61, -70, -56, 61, 61,
	-77, -76, -75, -54, -56, 61, -48, 69, -3, -52,
	-89, 60, -86, -90, -88, -85, -12, -8, -3, 61,
	61, -129, -38, 27, 27, 36, -38, -10, 69, -9,
	8, 13, -53, 61, -138, -17, 61, 61, -35, 69,
	76, -138, 67, -49, -49, -7, 61, 69, -6, -66,
	-7, 69, -72, -5, -33, 61, -13, -5, -13, -3,
	69, -27, -67, 61, -106, 73, -106, -105, -104, -97,
	-3, -103, -102, -96, -3, -106, 25, -91, -110, -106,
	-106, -101, 63, -94, 4, -93, 61, -3, -95, -5,
	-106, -122, 63, -7, 60, -67, 60, -52, -66, 63,
	-14, -14, -62, -128, -59, 67, -133, 61, 73, 67,
	-28, -16, -15, -14, 68, -58, -58, 61, 69, -5,
	61, 61, 61, -106, 73, 69, 63, -106, 69, 63,
	60, 61, 61, 50, 63, -99, -98, 60, -106, 60,
	-5, 61, -76, -67, 61, -67, 69, -38, 69, -66,
	67, 66, 6, 76, -64, -35, -49, 69, 69, -5,
	-5, -52, -106, -97, -5, -96, -101, -99, -94, -101,
	-101, 61, 61, -14, -14, -65, -63, 15, 73, -58,
	61, 61, 61, 61, -52, -52, 67, 67, 21, -11,
	69, -99, -99, -134, -24, -53,
}
var yyDef = [...]int{

	4, -2, 2, 0, 6, 0, 21, 0, 219, 0,
	157, 158, 159, 0, 5, 345, 19, -2, 0, 0,
	3, 0, 0, 0, 20, 0, 24, 25, 26, 27,
	0, 0, 0, 0, 257, 258, 259, 260, 261, 0,
	264, 155, 155, 0, 0, 0, 293, 38, -2, 0,
	74, 88, 91, 78, 163, 93, -2, 114, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 0, 126, 127,
	134, 0, 0, 139, -2, -2, 0, 291, 0, 0,
	196, 197, 0, 0, 7, 8, 0, 21, 15, 0,
	0, 0, 0, 346, 0, 0, 0, 0, 0, 18,
	220, 28, 0, 0, 275, 154, 31, 0, 0, 35,
	0, 0, 47, 211, 250, 0, 0, 262, 265, 156,
	153, 266, -2, 0, 162, 0, -2, 269, 270, 294,
	277, 0, 53, 54, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 295, 295, 0,
	295, 0, 0, 291, 115, 116, 117, 118, 119, 120,
	121, 122, 140, 0, 148, 149, 172, -2, -2, 0,
	0, 0, 140, 151, 152, -2, 218, 0, 0, 292,
	193, 0, 176, 177, 178, 179, 0, 0, 189, 0,
	0, 0, 287, 10, 13, 21, 12, 16, 17, 160,
	161, 22, 0, 0, 311, 0, 0, 312, 211, 0,
	0, 287, 30, 221, 39, 0, 0, 166, 167, 168,
	169, 170, 0, 0, 287, 34, 0, 0, 287, 37,
	225, 48, 204, -2, 0, 289, 248, 244, 162, 247,
	150, 164, 0, 250, -2, 250, 50, 94, 95, 96,
	97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 51, 52, 278,
	75, 0, 71, 72, 296, 0, 0, 89, 76, 63,
	79, 123, 289, 279, 128, 0, 292, 0, 285, 147,
	175, 0, 289, 285, 0, 271, 253, 254, 255, 256,
	59, 0, 0, 194, 0, 198, 0, 0, 287, 201,
	227, 0, 303, 0, 0, 273, 239, -2, 287, 203,
	229, 0, 241, 0, 0, 288, 11, 0, 0, 313,
	314, 315, 318, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 297, 0, 347, 0,
	0, 288, 0, 41, 276, 0, 0, 0, 288, 0,
	43, 0, 288, 0, 213, 290, 251, 245, 246, 165,
	0, 0, 263, 0, 73, 65, 295, 0, 0, 69,
	0, 295, 0, 0, 0, 289, 290, 0, 0, 131,
	291, 0, 289, 281, 282, 142, 140, 140, 0, 199,
	-2, -2, -2, -2, 0, 0, 290, 0, 217, -2,
	-2, 191, 192, 180, 190, 0, 0, 288, 303, 0,
	232, 304, 0, 0, 237, 303, 0, 0, 0, 288,
	240, 250, 0, 9, 14, 305, 306, 0, 0, 0,
	299, 301, 325, 326, 0, 0, 316, 317, 0, 297,
	0, 343, 0, 340, 0, 342, 0, 309, 310, 0,
	298, 0, 0, 303, 0, 29, 222, 40, 171, 32,
	287, 223, 44, 46, 42, 36, 226, 212, 162, 210,
	214, 250, 184, 185, 186, 187, 188, 249, 0, 213,
	213, -2, 0, 0, 0, 63, 77, 64, 92, 61,
	0, 0, 80, 124, 0, 280, 129, 130, 0, 137,
	290, 286, 0, 285, 285, 0, 135, 136, 272, 0,
	195, 200, 228, 231, 274, 303, 0, 234, 0, 238,
	202, 230, 0, 242, 320, 0, 0, 0, 300, 349,
	0, 0, 302, 351, 0, 335, -2, -2, 0, 328,
	329, 0, 307, 0, 341, 0, 336, 0, 348, 331,
	303, 0, 288, 45, 250, 0, 250, 206, 0, 295,
	67, 68, 0, -2, 0, 58, 84, 125, 132, 291,
	283, 284, 141, 144, 140, 0, 0, -2, 60, 233,
	303, 303, 213, 321, 0, 323, 0, 303, 324, 0,
	297, 327, 336, 0, 308, 208, 337, 297, 339, 297,
	332, 33, 224, 0, 215, 0, 66, 70, 90, 62,
	55, 0, 0, 0, 86, 0, 285, 143, 138, 235,
	236, 243, 322, 350, 333, 352, 0, 330, 0, 0,
	0, 213, 213, 0, 0, 81, 85, 0, 133, 0,
	336, 344, 338, 336, 207, 205, 56, 57, 82, 87,
	145, 334, 209, 295, 0, 83,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 70, 3, 3, 65, 56, 57, 3,
	60, 61, 54, 50, 76, 51, 64, 55, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 67, 63,
	3, 66, 3, 74, 75, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 72, 3, 73, 53, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 68, 52, 69, 71,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 58, 59,
	62,
}
var yyTok3 = [...]int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lookahead func() int
	state     func() int
}

func (p *yyParserImpl) Lookahead() int {
	return p.lookahead()
}

func yyNewParser() yyParser {
	p := &yyParserImpl{
		lookahead: func() int { return -1 },
		state:     func() int { return -1 },
	}
	return p
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}
	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	var yyDollar []yySymType
	yyS := make([]yySymType, yyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yychar := -1
	yytoken := -1 // yychar translated into internal numbering
	yyrcvr.state = func() int { return yystate }
	yyrcvr.lookahead = func() int { return yychar }
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yychar = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yychar < 0 {
		yychar, yytoken = yylex1(yylex, &yylval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yychar = -1
		yytoken = -1
		yyVAL = yylval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yychar < 0 {
			yychar, yytoken = yylex1(yylex, &yylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yychar = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:127
		{
			xtop = concat(xtop, yyDollar[4].list)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:133
		{
			prevlineno = lineno
			Yyerror("package statement must be first")
			errorexit()
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:139
		{
			mkpackage(yyDollar[2].sym.Name)
		}
	case 4:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:149
		{
			importpkg = Runtimepkg

			if Debug['A'] != 0 {
				cannedimports("runtime.Builtin", "package runtime\n\n$$\n\n")
			} else {
				cannedimports("runtime.Builtin", runtimeimport)
			}
			curio.importsafe = true
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:161
		{
			importpkg = nil
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:175
		{
			ipkg := importpkg
			my := importmyname
			importpkg = nil
			importmyname = nil

			if my == nil {
				my = Lookup(ipkg.Name)
			}

			pack := Nod(OPACK, nil, nil)
			pack.Sym = my
			pack.Pkg = ipkg
			pack.Lineno = int32(yyDollar[1].i)

			if strings.HasPrefix(my.Name, ".") {
				importdot(ipkg, pack)
				break
			}
			if my.Name == "init" {
				Yyerror("cannot import package as init - init must be a func")
				break
			}
			if my.Name == "_" {
				break
			}
			if my.Def != nil {
				lineno = int32(yyDollar[1].i)
				redeclare(my, "as imported package name")
			}
			my.Def = pack
			my.Lastlineno = int32(yyDollar[1].i)
			my.Block = 1 // at top level
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:210
		{
			// When an invalid import path is passed to importfile,
			// it calls Yyerror and then sets up a fake import with
			// no package statement. This allows us to test more
			// than one invalid import statement in a single file.
			if nerrors == 0 {
				Fatal("phase error in import")
			}
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:226
		{
			// import with original name
			yyVAL.i = parserline()
			importmyname = nil
			importfile(&yyDollar[1].val, yyVAL.i)
		}
	case 16:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:233
		{
			// import with given name
			yyVAL.i = parserline()
			importmyname = yyDollar[1].sym
			importfile(&yyDollar[2].val, yyVAL.i)
		}
	case 17:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:240
		{
			// import into my name space
			yyVAL.i = parserline()
			importmyname = Lookup(".")
			importfile(&yyDollar[2].val, yyVAL.i)
		}
	case 18:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:249
		{
			if importpkg.Name == "" {
				importpkg.Name = yyDollar[2].sym.Name
				numImport[yyDollar[2].sym.Name]++
			} else if importpkg.Name != yyDollar[2].sym.Name {
				Yyerror("conflicting names %s and %s for package %q", importpkg.Name, yyDollar[2].sym.Name, importpkg.Path)
			}
			importpkg.Direct = 1
			importpkg.Safe = curio.importsafe

			if safemode != 0 && !curio.importsafe {
				Yyerror("cannot import unsafe package %q", importpkg.Path)
			}
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:266
		{
			if yyDollar[1].sym.Name == "safe" {
				curio.importsafe = true
			}
		}
	case 21:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:273
		{
			defercheckwidth()
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:277
		{
			resumecheckwidth()
			unimportfile()
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:286
		{
			Yyerror("empty top-level declaration")
			yyVAL.list = nil
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:292
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:296
		{
			Yyerror("non-declaration statement outside function body")
			yyVAL.list = nil
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:301
		{
			yyVAL.list = nil
		}
	case 28:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:307
		{
			yyVAL.list = yyDollar[2].list
		}
	case 29:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:311
		{
			yyVAL.list = yyDollar[3].list
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:315
		{
			yyVAL.list = nil
		}
	case 31:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:319
		{
			yyVAL.list = yyDollar[2].list
			iota_ = -100000
			lastconst = nil
		}
	case 32:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:325
		{
			yyVAL.list = yyDollar[3].list
			iota_ = -100000
			lastconst = nil
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line go.y:331
		{
			yyVAL.list = concat(yyDollar[3].list, yyDollar[5].list)
			iota_ = -100000
			lastconst = nil
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:337
		{
			yyVAL.list = nil
			iota_ = -100000
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:342
		{
			yyVAL.list = list1(yyDollar[2].node)
		}
	case 36:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:346
		{
			yyVAL.list = yyDollar[3].list
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:350
		{
			yyVAL.list = nil
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:356
		{
			iota_ = 0
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:362
		{
			yyVAL.list = variter(yyDollar[1].list, yyDollar[2].node, nil)
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:366
		{
			yyVAL.list = variter(yyDollar[1].list, yyDollar[2].node, yyDollar[4].list)
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:370
		{
			yyVAL.list = variter(yyDollar[1].list, nil, yyDollar[3].list)
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:376
		{
			yyVAL.list = constiter(yyDollar[1].list, yyDollar[2].node, yyDollar[4].list)
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:380
		{
			yyVAL.list = constiter(yyDollar[1].list, nil, yyDollar[3].list)
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:387
		{
			yyVAL.list = constiter(yyDollar[1].list, yyDollar[2].node, nil)
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:391
		{
			yyVAL.list = constiter(yyDollar[1].list, nil, nil)
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:397
		{
			// different from dclname because the name
			// becomes visible right here, not at the end
			// of the declaration.
			yyVAL.node = typedcl0(yyDollar[1].sym)
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:406
		{
			yyVAL.node = typedcl1(yyDollar[1].node, yyDollar[2].node, true)
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:412
		{
			yyVAL.node = yyDollar[1].node

			// These nodes do not carry line numbers.
			// Since a bare name used as an expression is an error,
			// introduce a wrapper node to give the correct line.
			switch yyVAL.node.Op {
			case ONAME, ONONAME, OTYPE, OPACK, OLITERAL:
				yyVAL.node = Nod(OPAREN, yyVAL.node, nil)
				yyVAL.node.Implicit = true
				break
			}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:426
		{
			yyVAL.node = Nod(OASOP, yyDollar[1].node, yyDollar[3].node)
			yyVAL.node.Etype = uint8(yyDollar[2].i) // rathole to pass opcode
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:431
		{
			if yyDollar[1].list.Next == nil && yyDollar[3].list.Next == nil {
				// simple
				yyVAL.node = Nod(OAS, yyDollar[1].list.N, yyDollar[3].list.N)
				break
			}
			// multiple
			yyVAL.node = Nod(OAS2, nil, nil)
			yyVAL.node.List = yyDollar[1].list
			yyVAL.node.Rlist = yyDollar[3].list
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:443
		{
			if yyDollar[3].list.N.Op == OTYPESW {
				yyVAL.node = Nod(OTYPESW, nil, yyDollar[3].list.N.Right)
				if yyDollar[3].list.Next != nil {
					Yyerror("expr.(type) must be alone in list")
				}
				if yyDollar[1].list.Next != nil {
					Yyerror("argument count mismatch: %d = %d", count(yyDollar[1].list), 1)
				} else if (yyDollar[1].list.N.Op != ONAME && yyDollar[1].list.N.Op != OTYPE && yyDollar[1].list.N.Op != ONONAME) || isblank(yyDollar[1].list.N) {
					Yyerror("invalid variable name %s in type switch", Nconv(yyDollar[1].list.N, 0))
				} else {
					yyVAL.node.Left = dclname(yyDollar[1].list.N.Sym)
				} // it's a colas, so must not re-use an oldname.
				break
			}
			yyVAL.node = colas(yyDollar[1].list, yyDollar[3].list, int32(yyDollar[2].i))
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:461
		{
			yyVAL.node = Nod(OASOP, yyDollar[1].node, Nodintconst(1))
			yyVAL.node.Implicit = true
			yyVAL.node.Etype = OADD
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:467
		{
			yyVAL.node = Nod(OASOP, yyDollar[1].node, Nodintconst(1))
			yyVAL.node.Implicit = true
			yyVAL.node.Etype = OSUB
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:475
		{
			var n, nn *Node

			// will be converted to OCASE
			// right will point to next case
			// done in casebody()
			markdcl()
			yyVAL.node = Nod(OXCASE, nil, nil)
			yyVAL.node.List = yyDollar[2].list
			if typesw != nil && typesw.Right != nil {
				n = typesw.Right.Left
				if n != nil {
					// type switch - declare variable
					nn = newname(n.Sym)
					declare(nn, dclcontext)
					yyVAL.node.Nname = nn

					// keep track of the instances for reporting unused
					nn.Defn = typesw.Right
				}
			}
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:498
		{
			var n *Node

			// will be converted to OCASE
			// right will point to next case
			// done in casebody()
			markdcl()
			yyVAL.node = Nod(OXCASE, nil, nil)
			if yyDollar[2].list.Next == nil {
				n = Nod(OAS, yyDollar[2].list.N, yyDollar[4].node)
			} else {
				n = Nod(OAS2, nil, nil)
				n.List = yyDollar[2].list
				n.Rlist = list1(yyDollar[4].node)
			}
			yyVAL.node.List = list1(n)
		}
	case 57:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:516
		{
			// will be converted to OCASE
			// right will point to next case
			// done in casebody()
			markdcl()
			yyVAL.node = Nod(OXCASE, nil, nil)
			yyVAL.node.List = list1(colas(yyDollar[2].list, list1(yyDollar[4].node), int32(yyDollar[3].i)))
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:525
		{
			var n, nn *Node

			markdcl()
			yyVAL.node = Nod(OXCASE, nil, nil)
			if typesw != nil && typesw.Right != nil {
				n = typesw.Right.Left
				if n != nil {
					// type switch - declare variable
					nn = newname(n.Sym)
					declare(nn, dclcontext)
					yyVAL.node.Nname = nn

					// keep track of the instances for reporting unused
					nn.Defn = typesw.Right
				}
			}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:546
		{
			markdcl()
		}
	case 60:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:550
		{
			if yyDollar[3].list == nil {
				yyVAL.node = Nod(OEMPTY, nil, nil)
			} else {
				yyVAL.node = liststmt(yyDollar[3].list)
			}
			popdcl()
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:561
		{
			// If the last token read by the lexer was consumed
			// as part of the case, clear it (parser has cleared yychar).
			// If the last token read by the lexer was the lookahead
			// leave it alone (parser has it cached in yychar).
			// This is so that the stmt_list action doesn't look at
			// the case tokens if the stmt_list is empty.
			yylast = yychar
			yyDollar[1].node.Xoffset = int64(block)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:572
		{
			// This is the only place in the language where a statement
			// list is not allowed to drop the final semicolon, because
			// it's the only place where a statement list is not followed
			// by a closing brace.  Handle the error for pedantry.

			// Find the final token of the statement list.
			// yylast is lookahead; yyprev is last of stmt_list
			last := yyprev

			if last > 0 && last != ';' && yychar != '}' {
				Yyerror("missing statement after label")
			}
			yyVAL.node = yyDollar[1].node
			yyVAL.node.Nbody = yyDollar[3].list
			popdcl()
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:591
		{
			yyVAL.list = nil
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:595
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[2].node)
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:601
		{
			markdcl()
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:605
		{
			yyVAL.list = yyDollar[3].list
			popdcl()
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:612
		{
			yyVAL.node = Nod(ORANGE, nil, yyDollar[4].node)
			yyVAL.node.List = yyDollar[1].list
			yyVAL.node.Etype = 0 // := flag
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:618
		{
			yyVAL.node = Nod(ORANGE, nil, yyDollar[4].node)
			yyVAL.node.List = yyDollar[1].list
			yyVAL.node.Colas = true
			colasdefn(yyDollar[1].list, yyVAL.node)
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:625
		{
			yyVAL.node = Nod(ORANGE, nil, yyDollar[2].node)
			yyVAL.node.Etype = 0 // := flag
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:632
		{
			// init ; test ; incr
			if yyDollar[5].node != nil && yyDollar[5].node.Colas {
				Yyerror("cannot declare in the for-increment")
			}
			yyVAL.node = Nod(OFOR, nil, nil)
			if yyDollar[1].node != nil {
				yyVAL.node.Ninit = list1(yyDollar[1].node)
			}
			yyVAL.node.Ntest = yyDollar[3].node
			yyVAL.node.Nincr = yyDollar[5].node
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:645
		{
			// normal test
			yyVAL.node = Nod(OFOR, nil, nil)
			yyVAL.node.Ntest = yyDollar[1].node
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:654
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.Nbody = concat(yyVAL.node.Nbody, yyDollar[2].list)
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:661
		{
			markdcl()
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:665
		{
			yyVAL.node = yyDollar[3].node
			popdcl()
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:672
		{
			// test
			yyVAL.node = Nod(OIF, nil, nil)
			yyVAL.node.Ntest = yyDollar[1].node
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:678
		{
			// init ; test
			yyVAL.node = Nod(OIF, nil, nil)
			if yyDollar[1].node != nil {
				yyVAL.node.Ninit = list1(yyDollar[1].node)
			}
			yyVAL.node.Ntest = yyDollar[3].node
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:690
		{
			markdcl()
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:694
		{
			if yyDollar[3].node.Ntest == nil {
				Yyerror("missing condition in if statement")
			}
		}
	case 80:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:700
		{
			yyDollar[3].node.Nbody = yyDollar[5].list
		}
	case 81:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line go.y:704
		{
			var n *Node
			var nn *NodeList

			yyVAL.node = yyDollar[3].node
			n = yyDollar[3].node
			popdcl()
			for nn = concat(yyDollar[7].list, yyDollar[8].list); nn != nil; nn = nn.Next {
				if nn.N.Op == OIF {
					popdcl()
				}
				n.Nelse = list1(nn.N)
				n = nn.N
			}
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:722
		{
			markdcl()
		}
	case 83:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:726
		{
			if yyDollar[4].node.Ntest == nil {
				Yyerror("missing condition in if statement")
			}
			yyDollar[4].node.Nbody = yyDollar[5].list
			yyVAL.list = list1(yyDollar[4].node)
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:735
		{
			yyVAL.list = nil
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:739
		{
			yyVAL.list = concat(yyDollar[1].list, yyDollar[2].list)
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:744
		{
			yyVAL.list = nil
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:748
		{
			l := &NodeList{N: yyDollar[2].node}
			l.End = l
			yyVAL.list = l
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:756
		{
			markdcl()
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:760
		{
			var n *Node
			n = yyDollar[3].node.Ntest
			if n != nil && n.Op != OTYPESW {
				n = nil
			}
			typesw = Nod(OXXX, typesw, n)
		}
	case 90:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line go.y:769
		{
			yyVAL.node = yyDollar[3].node
			yyVAL.node.Op = OSWITCH
			yyVAL.node.List = yyDollar[6].list
			typesw = typesw.Left
			popdcl()
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:779
		{
			typesw = Nod(OXXX, typesw, nil)
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:783
		{
			yyVAL.node = Nod(OSELECT, nil, nil)
			yyVAL.node.Lineno = typesw.Lineno
			yyVAL.node.List = yyDollar[4].list
			typesw = typesw.Left
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:796
		{
			yyVAL.node = Nod(OOROR, yyDollar[1].node, yyDollar[3].node)
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:800
		{
			yyVAL.node = Nod(OANDAND, yyDollar[1].node, yyDollar[3].node)
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:804
		{
			yyVAL.node = Nod(OEQ, yyDollar[1].node, yyDollar[3].node)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:808
		{
			yyVAL.node = Nod(ONE, yyDollar[1].node, yyDollar[3].node)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:812
		{
			yyVAL.node = Nod(OLT, yyDollar[1].node, yyDollar[3].node)
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:816
		{
			yyVAL.node = Nod(OLE, yyDollar[1].node, yyDollar[3].node)
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:820
		{
			yyVAL.node = Nod(OGE, yyDollar[1].node, yyDollar[3].node)
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:824
		{
			yyVAL.node = Nod(OGT, yyDollar[1].node, yyDollar[3].node)
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:828
		{
			yyVAL.node = Nod(OADD, yyDollar[1].node, yyDollar[3].node)
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:832
		{
			yyVAL.node = Nod(OSUB, yyDollar[1].node, yyDollar[3].node)
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:836
		{
			yyVAL.node = Nod(OOR, yyDollar[1].node, yyDollar[3].node)
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:840
		{
			yyVAL.node = Nod(OXOR, yyDollar[1].node, yyDollar[3].node)
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:844
		{
			yyVAL.node = Nod(OMUL, yyDollar[1].node, yyDollar[3].node)
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:848
		{
			yyVAL.node = Nod(ODIV, yyDollar[1].node, yyDollar[3].node)
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:852
		{
			yyVAL.node = Nod(OMOD, yyDollar[1].node, yyDollar[3].node)
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:856
		{
			yyVAL.node = Nod(OAND, yyDollar[1].node, yyDollar[3].node)
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:860
		{
			yyVAL.node = Nod(OANDNOT, yyDollar[1].node, yyDollar[3].node)
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:864
		{
			yyVAL.node = Nod(OLSH, yyDollar[1].node, yyDollar[3].node)
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:868
		{
			yyVAL.node = Nod(ORSH, yyDollar[1].node, yyDollar[3].node)
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:873
		{
			yyVAL.node = Nod(OSEND, yyDollar[1].node, yyDollar[3].node)
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:880
		{
			yyVAL.node = Nod(OIND, yyDollar[2].node, nil)
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:884
		{
			if yyDollar[2].node.Op == OCOMPLIT {
				// Special case for &T{...}: turn into (*T){...}.
				yyVAL.node = yyDollar[2].node
				yyVAL.node.Right = Nod(OIND, yyVAL.node.Right, nil)
				yyVAL.node.Right.Implicit = true
			} else {
				yyVAL.node = Nod(OADDR, yyDollar[2].node, nil)
			}
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:895
		{
			yyVAL.node = Nod(OPLUS, yyDollar[2].node, nil)
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:899
		{
			yyVAL.node = Nod(OMINUS, yyDollar[2].node, nil)
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:903
		{
			yyVAL.node = Nod(ONOT, yyDollar[2].node, nil)
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:907
		{
			Yyerror("the bitwise complement operator is ^")
			yyVAL.node = Nod(OCOM, yyDollar[2].node, nil)
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:912
		{
			yyVAL.node = Nod(OCOM, yyDollar[2].node, nil)
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:916
		{
			yyVAL.node = Nod(ORECV, yyDollar[2].node, nil)
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:926
		{
			yyVAL.node = Nod(OCALL, yyDollar[1].node, nil)
		}
	case 124:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:930
		{
			yyVAL.node = Nod(OCALL, yyDollar[1].node, nil)
			yyVAL.node.List = yyDollar[3].list
		}
	case 125:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line go.y:935
		{
			yyVAL.node = Nod(OCALL, yyDollar[1].node, nil)
			yyVAL.node.List = yyDollar[3].list
			yyVAL.node.Isddd = true
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:943
		{
			yyVAL.node = nodlit(yyDollar[1].val)
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:948
		{
			if yyDollar[1].node.Op == OPACK {
				var s *Sym
				s = restrictlookup(yyDollar[3].sym.Name, yyDollar[1].node.Pkg)
				yyDollar[1].node.Used = true
				yyVAL.node = oldname(s)
				break
			}
			yyVAL.node = Nod(OXDOT, yyDollar[1].node, newname(yyDollar[3].sym))
		}
	case 129:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:959
		{
			yyVAL.node = Nod(ODOTTYPE, yyDollar[1].node, yyDollar[4].node)
		}
	case 130:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:963
		{
			yyVAL.node = Nod(OTYPESW, nil, yyDollar[1].node)
		}
	case 131:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:967
		{
			yyVAL.node = Nod(OINDEX, yyDollar[1].node, yyDollar[3].node)
		}
	case 132:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line go.y:971
		{
			yyVAL.node = Nod(OSLICE, yyDollar[1].node, Nod(OKEY, yyDollar[3].node, yyDollar[5].node))
		}
	case 133:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line go.y:975
		{
			if yyDollar[5].node == nil {
				Yyerror("middle index required in 3-index slice")
			}
			if yyDollar[7].node == nil {
				Yyerror("final index required in 3-index slice")
			}
			yyVAL.node = Nod(OSLICE3, yyDollar[1].node, Nod(OKEY, yyDollar[3].node, Nod(OKEY, yyDollar[5].node, yyDollar[7].node)))
		}
	case 135:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:986
		{
			// conversion
			yyVAL.node = Nod(OCALL, yyDollar[1].node, nil)
			yyVAL.node.List = list1(yyDollar[3].node)
		}
	case 136:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:992
		{
			yyVAL.node = yyDollar[3].node
			yyVAL.node.Right = yyDollar[1].node
			yyVAL.node.List = yyDollar[4].list
			fixlbrace(yyDollar[2].i)
		}
	case 137:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:999
		{
			yyVAL.node = yyDollar[3].node
			yyVAL.node.Right = yyDollar[1].node
			yyVAL.node.List = yyDollar[4].list
		}
	case 138:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line go.y:1005
		{
			Yyerror("cannot parenthesize type in composite literal")
			yyVAL.node = yyDollar[5].node
			yyVAL.node.Right = yyDollar[2].node
			yyVAL.node.List = yyDollar[6].list
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:1014
		{
			// composite expression.
			// make node early so we get the right line number.
			yyVAL.node = Nod(OCOMPLIT, nil, nil)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1022
		{
			yyVAL.node = Nod(OKEY, yyDollar[1].node, yyDollar[3].node)
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1028
		{
			// These nodes do not carry line numbers.
			// Since a composite literal commonly spans several lines,
			// the line number on errors may be misleading.
			// Introduce a wrapper node to give the correct line.
			yyVAL.node = yyDollar[1].node
			switch yyVAL.node.Op {
			case ONAME, ONONAME, OTYPE, OPACK, OLITERAL:
				yyVAL.node = Nod(OPAREN, yyVAL.node, nil)
				yyVAL.node.Implicit = true
			}
		}
	case 143:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1041
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.List = yyDollar[3].list
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1049
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.List = yyDollar[3].list
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1057
		{
			yyVAL.node = yyDollar[2].node

			// Need to know on lhs of := whether there are ( ).
			// Don't bother with the OPAREN in other cases:
			// it's just a waste of memory and time.
			switch yyVAL.node.Op {
			case ONAME, ONONAME, OPACK, OTYPE, OLITERAL, OTYPESW:
				yyVAL.node = Nod(OPAREN, yyVAL.node, nil)
			}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1078
		{
			yyVAL.i = LBODY
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1082
		{
			yyVAL.i = '{'
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1093
		{
			if yyDollar[1].sym == nil {
				yyVAL.node = nil
			} else {
				yyVAL.node = newname(yyDollar[1].sym)
			}
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1103
		{
			yyVAL.node = dclname(yyDollar[1].sym)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:1108
		{
			yyVAL.node = nil
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1115
		{
			yyVAL.sym = yyDollar[1].sym
			// during imports, unqualified non-exported identifiers are from builtinpkg
			if importpkg != nil && !exportname(yyDollar[1].sym.Name) {
				yyVAL.sym = Pkglookup(yyDollar[1].sym.Name, builtinpkg)
			}
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1124
		{
			yyVAL.sym = nil
		}
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1130
		{
			var p *Pkg

			if yyDollar[2].val.U.Sval == "" {
				p = importpkg
			} else {
				if isbadimport(yyDollar[2].val.U.Sval) {
					errorexit()
				}
				p = mkpkg(yyDollar[2].val.U.Sval)
			}
			yyVAL.sym = Pkglookup(yyDollar[4].sym.Name, p)
		}
	case 161:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1144
		{
			var p *Pkg

			if yyDollar[2].val.U.Sval == "" {
				p = importpkg
			} else {
				if isbadimport(yyDollar[2].val.U.Sval) {
					errorexit()
				}
				p = mkpkg(yyDollar[2].val.U.Sval)
			}
			yyVAL.sym = Pkglookup("?", p)
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1160
		{
			yyVAL.node = oldname(yyDollar[1].sym)
			if yyVAL.node.Pack != nil {
				yyVAL.node.Pack.Used = true
			}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1181
		{
			Yyerror("final argument in variadic function missing type")
			yyVAL.node = Nod(ODDD, typenod(typ(TINTER)), nil)
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1186
		{
			yyVAL.node = Nod(ODDD, yyDollar[2].node, nil)
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1197
		{
			yyVAL.node = yyDollar[2].node
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1206
		{
			yyVAL.node = Nod(OIND, yyDollar[2].node, nil)
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1216
		{
			yyVAL.node = yyDollar[2].node
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1237
		{
			if yyDollar[1].node.Op == OPACK {
				var s *Sym
				s = restrictlookup(yyDollar[3].sym.Name, yyDollar[1].node.Pkg)
				yyDollar[1].node.Used = true
				yyVAL.node = oldname(s)
				break
			}
			yyVAL.node = Nod(OXDOT, yyDollar[1].node, newname(yyDollar[3].sym))
		}
	case 191:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1250
		{
			yyVAL.node = Nod(OTARRAY, yyDollar[2].node, yyDollar[4].node)
		}
	case 192:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1254
		{
			// array literal of nelem
			yyVAL.node = Nod(OTARRAY, Nod(ODDD, nil, nil), yyDollar[4].node)
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1259
		{
			yyVAL.node = Nod(OTCHAN, yyDollar[2].node, nil)
			yyVAL.node.Etype = Cboth
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1264
		{
			yyVAL.node = Nod(OTCHAN, yyDollar[3].node, nil)
			yyVAL.node.Etype = Csend
		}
	case 195:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1269
		{
			yyVAL.node = Nod(OTMAP, yyDollar[3].node, yyDollar[5].node)
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1277
		{
			yyVAL.node = Nod(OIND, yyDollar[2].node, nil)
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1283
		{
			yyVAL.node = Nod(OTCHAN, yyDollar[3].node, nil)
			yyVAL.node.Etype = Crecv
		}
	case 200:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1290
		{
			yyVAL.node = Nod(OTSTRUCT, nil, nil)
			yyVAL.node.List = yyDollar[3].list
			fixlbrace(yyDollar[2].i)
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1296
		{
			yyVAL.node = Nod(OTSTRUCT, nil, nil)
			fixlbrace(yyDollar[2].i)
		}
	case 202:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1303
		{
			yyVAL.node = Nod(OTINTER, nil, nil)
			yyVAL.node.List = yyDollar[3].list
			fixlbrace(yyDollar[2].i)
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1309
		{
			yyVAL.node = Nod(OTINTER, nil, nil)
			fixlbrace(yyDollar[2].i)
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1320
		{
			yyVAL.node = yyDollar[2].node
			if yyVAL.node == nil {
				break
			}
			if noescape && yyDollar[3].list != nil {
				Yyerror("can only use //go:noescape with external func implementations")
			}
			yyVAL.node.Nbody = yyDollar[3].list
			yyVAL.node.Func.Endlineno = lineno
			yyVAL.node.Noescape = noescape
			yyVAL.node.Func.Nosplit = nosplit
			yyVAL.node.Func.Nowritebarrier = nowritebarrier
			funcbody(yyVAL.node)
		}
	case 205:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line go.y:1339
		{
			var t *Node

			yyVAL.node = nil

			yyDollar[6].list = checkarglist(yyDollar[6].list, 1)

			if yyDollar[4].sym.Name == "init" {
				yyDollar[4].sym = renameinit()
				if yyDollar[6].list != nil || yyDollar[8].list != nil {
					Yyerror("func init must have no arguments and no return values")
				}
			}
			if localpkg.Name == "main" && yyDollar[4].sym.Name == "main" {
				if yyDollar[6].list != nil || yyDollar[8].list != nil {
					Yyerror("func main must have no arguments and no return values")
				}
			}

			t = Nod(OTFUNC, nil, nil)
			t.List = yyDollar[6].list
			t.Rlist = yyDollar[8].list
			t.Generic = yyDollar[2].sym.Name

			yyVAL.node = Nod(ODCLFUNC, nil, nil)
			yyVAL.node.Nname = newfuncname(yyDollar[4].sym)
			yyVAL.node.Nname.Defn = yyVAL.node
			yyVAL.node.Nname.Ntype = t // TODO: check if nname already has an ntype
			declare(yyVAL.node.Nname, PFUNC)

			funchdr(yyVAL.node)
		}
	case 206:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1372
		{
			var t *Node

			yyVAL.node = nil
			yyDollar[3].list = checkarglist(yyDollar[3].list, 1)

			if yyDollar[1].sym.Name == "init" {
				yyDollar[1].sym = renameinit()
				if yyDollar[3].list != nil || yyDollar[5].list != nil {
					Yyerror("func init must have no arguments and no return values")
				}
			}
			if localpkg.Name == "main" && yyDollar[1].sym.Name == "main" {
				if yyDollar[3].list != nil || yyDollar[5].list != nil {
					Yyerror("func main must have no arguments and no return values")
				}
			}

			t = Nod(OTFUNC, nil, nil)
			t.List = yyDollar[3].list
			t.Rlist = yyDollar[5].list

			yyVAL.node = Nod(ODCLFUNC, nil, nil)
			yyVAL.node.Nname = newfuncname(yyDollar[1].sym)
			yyVAL.node.Nname.Defn = yyVAL.node
			yyVAL.node.Nname.Ntype = t // TODO: check if nname already has an ntype
			declare(yyVAL.node.Nname, PFUNC)

			funchdr(yyVAL.node)
		}
	case 207:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line go.y:1403
		{
			var rcvr, t *Node

			yyVAL.node = nil
			yyDollar[2].list = checkarglist(yyDollar[2].list, 0)
			yyDollar[6].list = checkarglist(yyDollar[6].list, 1)

			if yyDollar[2].list == nil {
				Yyerror("method has no receiver")
				break
			}
			if yyDollar[2].list.Next != nil {
				Yyerror("method has multiple receivers")
				break
			}
			rcvr = yyDollar[2].list.N
			if rcvr.Op != ODCLFIELD {
				Yyerror("bad receiver in method")
				break
			}

			t = Nod(OTFUNC, rcvr, nil)
			t.List = yyDollar[6].list
			t.Rlist = yyDollar[8].list

			yyVAL.node = Nod(ODCLFUNC, nil, nil)
			yyVAL.node.Func.Shortname = newfuncname(yyDollar[4].sym)
			yyVAL.node.Nname = methodname1(yyVAL.node.Func.Shortname, rcvr.Right)
			yyVAL.node.Nname.Defn = yyVAL.node
			yyVAL.node.Nname.Ntype = t
			yyVAL.node.Nname.Nointerface = nointerface
			declare(yyVAL.node.Nname, PFUNC)

			funchdr(yyVAL.node)
		}
	case 208:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1441
		{
			var s *Sym
			var t *Type

			yyVAL.node = nil

			s = yyDollar[1].sym
			t = functype(nil, yyDollar[3].list, yyDollar[5].list)

			importsym(s, ONAME)
			if s.Def != nil && s.Def.Op == ONAME {
				if Eqtype(t, s.Def.Type) {
					dclcontext = PDISCARD // since we skip funchdr below
					break
				}
				Yyerror("inconsistent definition for func %v during import\n\t%v\n\t%v", Sconv(s, 0), Tconv(s.Def.Type, 0), Tconv(t, 0))
			}

			yyVAL.node = newfuncname(s)
			yyVAL.node.Type = t
			declare(yyVAL.node, PFUNC)

			funchdr(yyVAL.node)
		}
	case 209:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line go.y:1466
		{
			yyVAL.node = methodname1(newname(yyDollar[4].sym), yyDollar[2].list.N.Right)
			yyVAL.node.Type = functype(yyDollar[2].list.N, yyDollar[6].list, yyDollar[8].list)

			checkwidth(yyVAL.node.Type)
			addmethod(yyDollar[4].sym, yyVAL.node.Type, false, nointerface)
			nointerface = false
			funchdr(yyVAL.node)

			// inl.C's inlnode in on a dotmeth node expects to find the inlineable body as
			// (dotmeth's type).Nname.Inl, and dotmeth's type has been pulled
			// out by typecheck's lookdot as this $$.ttype.  So by providing
			// this back link here we avoid special casing there.
			yyVAL.node.Type.Nname = yyVAL.node
		}
	case 210:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1484
		{
			yyDollar[3].list = checkarglist(yyDollar[3].list, 1)
			yyVAL.node = Nod(OTFUNC, nil, nil)
			yyVAL.node.List = yyDollar[3].list
			yyVAL.node.Rlist = yyDollar[5].list
		}
	case 211:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:1492
		{
			yyVAL.list = nil
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1496
		{
			yyVAL.list = yyDollar[2].list
			if yyVAL.list == nil {
				yyVAL.list = list1(Nod(OEMPTY, nil, nil))
			}
		}
	case 213:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:1505
		{
			yyVAL.list = nil
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1509
		{
			yyVAL.list = list1(Nod(ODCLFIELD, nil, yyDollar[1].node))
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1513
		{
			yyDollar[2].list = checkarglist(yyDollar[2].list, 0)
			yyVAL.list = yyDollar[2].list
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1520
		{
			closurehdr(yyDollar[1].node)
		}
	case 217:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1526
		{
			yyVAL.node = closurebody(yyDollar[3].list)
			fixlbrace(yyDollar[2].i)
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1531
		{
			yyVAL.node = closurebody(nil)
		}
	case 219:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:1542
		{
			yyVAL.list = nil
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1546
		{
			yyVAL.list = concat(yyDollar[1].list, yyDollar[2].list)
			if nsyntaxerrors == 0 {
				testdclstack()
			}
			nointerface = false
			noescape = false
			nosplit = false
			nowritebarrier = false
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1560
		{
			yyVAL.list = concat(yyDollar[1].list, yyDollar[3].list)
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1567
		{
			yyVAL.list = concat(yyDollar[1].list, yyDollar[3].list)
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1573
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1577
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1584
		{
			yyVAL.list = concat(yyDollar[1].list, yyDollar[3].list)
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1590
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1594
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1600
		{
			var l *NodeList

			var n *Node
			l = yyDollar[1].list
			if l == nil {
				// ? symbol, during import (list1(nil) == nil)
				n = yyDollar[2].node
				if n.Op == OIND {
					n = n.Left
				}
				n = embedded(n.Sym, importpkg)
				n.Right = yyDollar[2].node
				n.Val = yyDollar[3].val
				yyVAL.list = list1(n)
				break
			}

			for l = yyDollar[1].list; l != nil; l = l.Next {
				l.N = Nod(ODCLFIELD, l.N, yyDollar[2].node)
				l.N.Val = yyDollar[3].val
			}
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1624
		{
			yyDollar[1].node.Val = yyDollar[2].val
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1629
		{
			yyDollar[2].node.Val = yyDollar[4].val
			yyVAL.list = list1(yyDollar[2].node)
			Yyerror("cannot parenthesize embedded type")
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1635
		{
			yyDollar[2].node.Right = Nod(OIND, yyDollar[2].node.Right, nil)
			yyDollar[2].node.Val = yyDollar[3].val
			yyVAL.list = list1(yyDollar[2].node)
		}
	case 235:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1641
		{
			yyDollar[3].node.Right = Nod(OIND, yyDollar[3].node.Right, nil)
			yyDollar[3].node.Val = yyDollar[5].val
			yyVAL.list = list1(yyDollar[3].node)
			Yyerror("cannot parenthesize embedded type")
		}
	case 236:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1648
		{
			yyDollar[3].node.Right = Nod(OIND, yyDollar[3].node.Right, nil)
			yyDollar[3].node.Val = yyDollar[5].val
			yyVAL.list = list1(yyDollar[3].node)
			Yyerror("cannot parenthesize embedded type")
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1657
		{
			var n *Node

			yyVAL.sym = yyDollar[1].sym
			n = oldname(yyDollar[1].sym)
			if n.Pack != nil {
				n.Pack.Used = true
			}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1667
		{
			var pkg *Pkg

			if yyDollar[1].sym.Def == nil || yyDollar[1].sym.Def.Op != OPACK {
				Yyerror("%v is not a package", Sconv(yyDollar[1].sym, 0))
				pkg = localpkg
			} else {
				yyDollar[1].sym.Def.Used = true
				pkg = yyDollar[1].sym.Def.Pkg
			}
			yyVAL.sym = restrictlookup(yyDollar[3].sym.Name, pkg)
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1682
		{
			yyVAL.node = embedded(yyDollar[1].sym, localpkg)
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1688
		{
			yyVAL.node = Nod(ODCLFIELD, yyDollar[1].node, yyDollar[2].node)
			ifacedcl(yyVAL.node)
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1693
		{
			yyVAL.node = Nod(ODCLFIELD, nil, oldname(yyDollar[1].sym))
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1697
		{
			yyVAL.node = Nod(ODCLFIELD, nil, oldname(yyDollar[2].sym))
			Yyerror("cannot parenthesize embedded type")
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1704
		{
			// without func keyword
			yyDollar[2].list = checkarglist(yyDollar[2].list, 1)
			yyVAL.node = Nod(OTFUNC, fakethis(), nil)
			yyVAL.node.List = yyDollar[2].list
			yyVAL.node.Rlist = yyDollar[4].list
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1718
		{
			yyVAL.node = Nod(ONONAME, nil, nil)
			yyVAL.node.Sym = yyDollar[1].sym
			yyVAL.node = Nod(OKEY, yyVAL.node, yyDollar[2].node)
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1724
		{
			yyVAL.node = Nod(ONONAME, nil, nil)
			yyVAL.node.Sym = yyDollar[1].sym
			yyVAL.node = Nod(OKEY, yyVAL.node, yyDollar[2].node)
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1733
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1737
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	case 250:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:1742
		{
			yyVAL.list = nil
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1746
		{
			yyVAL.list = yyDollar[1].list
		}
	case 252:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:1754
		{
			yyVAL.node = nil
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1759
		{
			yyVAL.node = liststmt(yyDollar[1].list)
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1764
		{
			yyVAL.node = nil
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1775
		{
			yyDollar[1].node = Nod(OLABEL, yyDollar[1].node, nil)
			yyDollar[1].node.Sym = dclstack // context, for goto restrictions
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1780
		{
			var l *NodeList

			yyDollar[1].node.Defn = yyDollar[4].node
			l = list1(yyDollar[1].node)
			if yyDollar[4].node != nil {
				l = list(l, yyDollar[4].node)
			}
			yyVAL.node = liststmt(l)
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1791
		{
			// will be converted to OFALL
			yyVAL.node = Nod(OXFALL, nil, nil)
			yyVAL.node.Xoffset = int64(block)
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1797
		{
			yyVAL.node = Nod(OBREAK, yyDollar[2].node, nil)
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1801
		{
			yyVAL.node = Nod(OCONTINUE, yyDollar[2].node, nil)
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1805
		{
			yyVAL.node = Nod(OPROC, yyDollar[2].node, nil)
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1809
		{
			yyVAL.node = Nod(ODEFER, yyDollar[2].node, nil)
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1813
		{
			yyVAL.node = Nod(OGOTO, yyDollar[2].node, nil)
			yyVAL.node.Sym = dclstack // context, for goto restrictions
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1818
		{
			yyVAL.node = Nod(ORETURN, nil, nil)
			yyVAL.node.List = yyDollar[2].list
			if yyVAL.node.List == nil && Curfn != nil {
				var l *NodeList

				for l = Curfn.Func.Dcl; l != nil; l = l.Next {
					if l.N.Class == PPARAM {
						continue
					}
					if l.N.Class != PPARAMOUT {
						break
					}
					if l.N.Sym.Def != l.N {
						Yyerror("%s is shadowed during return", l.N.Sym.Name)
					}
				}
			}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1840
		{
			yyVAL.list = nil
			if yyDollar[1].node != nil {
				yyVAL.list = list1(yyDollar[1].node)
			}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1847
		{
			yyVAL.list = yyDollar[1].list
			if yyDollar[3].node != nil {
				yyVAL.list = list(yyVAL.list, yyDollar[3].node)
			}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1856
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1860
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1866
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1870
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1876
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1880
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1886
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1890
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1899
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1903
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1907
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1911
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	case 285:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:1916
		{
			yyVAL.list = nil
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1920
		{
			yyVAL.list = yyDollar[1].list
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:1934
		{
			yyVAL.node = nil
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:1940
		{
			yyVAL.list = nil
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:1946
		{
			yyVAL.node = nil
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:1952
		{
			yyVAL.list = nil
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:1958
		{
			yyVAL.list = nil
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:1964
		{
			yyVAL.list = nil
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:1970
		{
			yyVAL.val.Ctype = CTxxx
		}
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1980
		{
			importimport(yyDollar[2].sym, yyDollar[3].val.U.Sval)
		}
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1984
		{
			importvar(yyDollar[2].sym, yyDollar[3].typ)
		}
	case 307:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1988
		{
			importconst(yyDollar[2].sym, Types[TIDEAL], yyDollar[4].node)
		}
	case 308:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line go.y:1992
		{
			importconst(yyDollar[2].sym, yyDollar[3].typ, yyDollar[5].node)
		}
	case 309:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1996
		{
			importtype(yyDollar[2].typ, yyDollar[3].typ)
		}
	case 310:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:2000
		{
			if yyDollar[2].node == nil {
				dclcontext = PEXTERN // since we skip the funcbody below
				break
			}

			yyDollar[2].node.Func.Inl = yyDollar[3].list

			funcbody(yyDollar[2].node)
			importlist = list(importlist, yyDollar[2].node)

			if Debug['E'] > 0 {
				print("import [%q] func %lN \n", importpkg.Path, yyDollar[2].node)
				if Debug['m'] > 2 && yyDollar[2].node.Func.Inl != nil {
					print("inl body:%+H\n", yyDollar[2].node.Func.Inl)
				}
			}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2021
		{
			yyVAL.sym = yyDollar[1].sym
			structpkg = yyVAL.sym.Pkg
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2028
		{
			yyVAL.typ = pkgtype(yyDollar[1].sym)
			importsym(yyDollar[1].sym, OTYPE)
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2048
		{
			yyVAL.typ = pkgtype(yyDollar[1].sym)
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2052
		{
			// predefined name like uint8
			yyDollar[1].sym = Pkglookup(yyDollar[1].sym.Name, builtinpkg)
			if yyDollar[1].sym.Def == nil || yyDollar[1].sym.Def.Op != OTYPE {
				Yyerror("%s is not a type", yyDollar[1].sym.Name)
				yyVAL.typ = nil
			} else {
				yyVAL.typ = yyDollar[1].sym.Def.Type
			}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2063
		{
			yyVAL.typ = aindex(nil, yyDollar[3].typ)
		}
	case 321:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:2067
		{
			yyVAL.typ = aindex(nodlit(yyDollar[2].val), yyDollar[4].typ)
		}
	case 322:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:2071
		{
			yyVAL.typ = maptype(yyDollar[3].typ, yyDollar[5].typ)
		}
	case 323:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:2075
		{
			yyVAL.typ = tostruct(yyDollar[3].list)
		}
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:2079
		{
			yyVAL.typ = tointerface(yyDollar[3].list)
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:2083
		{
			yyVAL.typ = Ptrto(yyDollar[2].typ)
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:2087
		{
			yyVAL.typ = typ(TCHAN)
			yyVAL.typ.Type = yyDollar[2].typ
			yyVAL.typ.Chan = Cboth
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:2093
		{
			yyVAL.typ = typ(TCHAN)
			yyVAL.typ.Type = yyDollar[3].typ
			yyVAL.typ.Chan = Cboth
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2099
		{
			yyVAL.typ = typ(TCHAN)
			yyVAL.typ.Type = yyDollar[3].typ
			yyVAL.typ.Chan = Csend
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2107
		{
			yyVAL.typ = typ(TCHAN)
			yyVAL.typ.Type = yyDollar[3].typ
			yyVAL.typ.Chan = Crecv
		}
	case 330:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:2115
		{
			yyVAL.typ = functype(nil, yyDollar[3].list, yyDollar[5].list)
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2121
		{
			yyVAL.node = Nod(ODCLFIELD, nil, typenod(yyDollar[2].typ))
			if yyDollar[1].sym != nil {
				yyVAL.node.Left = newname(yyDollar[1].sym)
			}
			yyVAL.node.Val = yyDollar[3].val
		}
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:2129
		{
			var t *Type

			t = typ(TARRAY)
			t.Bound = -1
			t.Type = yyDollar[3].typ

			yyVAL.node = Nod(ODCLFIELD, nil, typenod(t))
			if yyDollar[1].sym != nil {
				yyVAL.node.Left = newname(yyDollar[1].sym)
			}
			yyVAL.node.Isddd = true
			yyVAL.node.Val = yyDollar[4].val
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2146
		{
			var s *Sym
			var p *Pkg

			if yyDollar[1].sym != nil && yyDollar[1].sym.Name != "?" {
				yyVAL.node = Nod(ODCLFIELD, newname(yyDollar[1].sym), typenod(yyDollar[2].typ))
				yyVAL.node.Val = yyDollar[3].val
			} else {
				s = yyDollar[2].typ.Sym
				if s == nil && Isptr[yyDollar[2].typ.Etype] {
					s = yyDollar[2].typ.Type.Sym
				}
				p = importpkg
				if yyDollar[1].sym != nil {
					p = yyDollar[1].sym.Pkg
				}
				yyVAL.node = embedded(s, p)
				yyVAL.node.Right = typenod(yyDollar[2].typ)
				yyVAL.node.Val = yyDollar[3].val
			}
		}
	case 334:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:2170
		{
			yyVAL.node = Nod(ODCLFIELD, newname(yyDollar[1].sym), typenod(functype(fakethis(), yyDollar[3].list, yyDollar[5].list)))
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2174
		{
			yyVAL.node = Nod(ODCLFIELD, nil, typenod(yyDollar[1].typ))
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:2179
		{
			yyVAL.list = nil
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2186
		{
			yyVAL.list = yyDollar[2].list
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2190
		{
			yyVAL.list = list1(Nod(ODCLFIELD, nil, typenod(yyDollar[1].typ)))
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2200
		{
			yyVAL.node = nodlit(yyDollar[1].val)
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:2204
		{
			yyVAL.node = nodlit(yyDollar[2].val)
			switch yyVAL.node.Val.Ctype {
			case CTINT, CTRUNE:
				mpnegfix(yyVAL.node.Val.U.Xval)
				break
			case CTFLT:
				mpnegflt(yyVAL.node.Val.U.Fval)
				break
			case CTCPLX:
				mpnegflt(&yyVAL.node.Val.U.Cval.Real)
				mpnegflt(&yyVAL.node.Val.U.Cval.Imag)
				break
			default:
				Yyerror("bad negated constant")
			}
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2222
		{
			yyVAL.node = oldname(Pkglookup(yyDollar[1].sym.Name, builtinpkg))
			if yyVAL.node.Op != OLITERAL {
				Yyerror("bad constant %v", Sconv(yyVAL.node.Sym, 0))
			}
		}
	case 344:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:2232
		{
			if yyDollar[2].node.Val.Ctype == CTRUNE && yyDollar[4].node.Val.Ctype == CTINT {
				yyVAL.node = yyDollar[2].node
				mpaddfixfix(yyDollar[2].node.Val.U.Xval, yyDollar[4].node.Val.U.Xval, 0)
				break
			}
			yyDollar[4].node.Val.U.Cval.Real = yyDollar[4].node.Val.U.Cval.Imag
			Mpmovecflt(&yyDollar[4].node.Val.U.Cval.Imag, 0.0)
			yyVAL.node = nodcplxlit(yyDollar[2].node.Val, yyDollar[4].node.Val)
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2248
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2252
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2258
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2262
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2268
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2272
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	}
	goto yystack /* stack new state and value */
}
